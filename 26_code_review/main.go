package main

/*
Go 代码审查方法：
	扫描的内容：
		静态扫描检查（业务无关；只关注代码）
			--> 如：未使用的常量、函数有返回值但是没有被使用、拼写问题、死代码、代码简化检测、命名中带下划线、冗余代码等。
		性能优化
			--> 前提是保证是正确的，做的性能优化才有意义。
	扫描工具：
		golangci-lint、golint、gofmt、misspell
	golangci-lint一些配置项：
		根据自己的需要，参考官方的配置选择适合自己配置内容。
		配置案例.golangci.yml
		推荐将golangci集成具体的ci流程中：gitlabci；github action；jenkins等
	堆内存和栈内存：
		栈内存由编译器自动分配和释放。
			一般存储：局部变量、参数。
			函数创建时，内存就会自动申请，函数返回时，内存释放。
		堆内存生命周期大于栈内存。
			一般是函数的返回值被别的地方使用时，编译器会被值转移到堆上。
			堆内存不会被编译器释放，需要的是GC来释放。
		对比：
			栈内存效率大于堆内存
	内存逃逸：
		原本应该被存储在栈上的变量，因为一些原因转移到了堆上

*/
